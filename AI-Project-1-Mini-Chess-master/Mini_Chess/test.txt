
# naive
# def findBestMove(gamestate, validMoves):
#     if gamestate.whiteToMove:
#         turnMultiplier = 1
#     else:
#         turnMultiplier = -1

#     maxScore = -CHECKMATE
#     bestMove = None

#     for playerMove in validMoves:
#         gamestate.makeMove(playerMove)

#         if gamestate.checkmate:
#             score = CHECKMATE
#         elif gamestate.stalemate:
#             score = STALEMATE
#         else:
#             score = turnMultiplier * scoreMaterial(gamestate.board)
#         # score = scoreMaterial(gamestate.board)
#         if(score > maxScore):
#             maxScore = score
#             bestMove = playerMove

#         gamestate.undoMove()
#     return bestMove



# score the board based on material
# def scoreMaterial(board):
#     score = 0
#     for row in board:
#         for square in row:
#             if square[0] == 'w':
#                 score += pieceValue[square[1]]
#             elif score[0] == 'b':
#                 score -= pieceValue[square[1]]

#     return score
